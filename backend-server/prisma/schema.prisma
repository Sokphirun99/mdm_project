// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  role       UserRole  @default(VIEWER)
  isActive   Boolean   @default(true) @map("is_active")
  lastLogin  DateTime? @map("last_login")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([email])
  @@index([role])
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  domain      String?
  settings    Json     @default("{}")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  devices  Device[]
  policies Policy[]

  @@index([domain])
  @@map("organizations")
}

model Device {
  id               String            @id @default(cuid())
  organizationId   String?           @map("organization_id")
  deviceId         String            @unique @map("device_id") // Android device ID
  serialNumber     String?           @map("serial_number")
  imei             String?
  fcmToken         String?           @map("fcm_token")
  deviceName       String            @map("device_name")
  model            String?
  manufacturer     String?
  androidVersion   String?           @map("android_version")
  apiLevel         Int?              @map("api_level")
  enrollmentMethod EnrollmentMethod  @default(MANUAL) @map("enrollment_method")
  status           DeviceStatus      @default(PENDING)
  complianceStatus ComplianceStatus  @default(UNKNOWN) @map("compliance_status")
  lastCheckin      DateTime?         @map("last_checkin")
  enrolledAt       DateTime?         @map("enrolled_at")
  deviceInfo       Json              @default("{}") @map("device_info")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Relations
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  devicePolicies DevicePolicy[]
  deviceApps     DeviceApp[]
  commands       Command[]

  @@index([deviceId])
  @@index([organizationId])
  @@index([status])
  @@index([fcmToken])
  @@map("devices")
}

model Policy {
  id             String    @id @default(cuid())
  organizationId String?   @map("organization_id")
  name           String
  description    String?
  type           PolicyType
  settings       Json      @default("{}")
  isActive       Boolean   @default(true) @map("is_active")
  priority       Int       @default(0)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  devicePolicies DevicePolicy[]

  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@map("policies")
}

model DevicePolicy {
  deviceId     String            @map("device_id")
  policyId     String            @map("policy_id")
  status       PolicyStatus      @default(PENDING)
  appliedAt    DateTime?         @map("applied_at")
  errorMessage String?           @map("error_message")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@id([deviceId, policyId])
  @@index([deviceId])
  @@index([policyId])
  @@index([status])
  @@map("device_policies")
}

model App {
  id          String    @id @default(cuid())
  packageName String    @unique @map("package_name")
  name        String
  version     String?
  description String?
  iconUrl     String?   @map("icon_url")
  isSystem    Boolean   @default(false) @map("is_system")
  isApproved  Boolean   @default(false) @map("is_approved")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  deviceApps DeviceApp[]

  @@index([packageName])
  @@index([isApproved])
  @@map("apps")
}

model DeviceApp {
  deviceId      String           @map("device_id")
  appId         String           @map("app_id")
  version       String?
  installStatus InstallStatus    @default(PENDING) @map("install_status")
  installType   InstallType      @default(USER) @map("install_type")
  installedAt   DateTime?        @map("installed_at")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  app    App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@id([deviceId, appId])
  @@index([deviceId])
  @@index([appId])
  @@index([installStatus])
  @@map("device_apps")
}

model Command {
  id          String        @id @default(cuid())
  deviceId    String        @map("device_id")
  type        CommandType
  payload     Json          @default("{}")
  status      CommandStatus @default(PENDING)
  result      Json?
  scheduledAt DateTime?     @map("scheduled_at")
  executedAt  DateTime?     @map("executed_at")
  expiresAt   DateTime?     @map("expires_at")
  retryCount  Int           @default(0) @map("retry_count")
  maxRetries  Int           @default(3) @map("max_retries")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([type])
  @@index([status])
  @@index([scheduledAt])
  @@map("commands")
}

model Event {
  id        String    @id @default(cuid())
  deviceId  String?   @map("device_id")
  type      EventType
  category  String
  message   String
  metadata  Json      @default("{}")
  severity  Severity  @default(INFO)
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([deviceId])
  @@index([type])
  @@index([category])
  @@index([severity])
  @@index([createdAt])
  @@map("events")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  VIEWER

  @@map("user_role")
}

enum EnrollmentMethod {
  QR_CODE
  MANUAL
  NFC
  BULK

  @@map("enrollment_method")
}

enum DeviceStatus {
  ENROLLED
  PENDING
  INACTIVE
  COMPROMISED

  @@map("device_status")
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  UNKNOWN

  @@map("compliance_status")
}

enum PolicyType {
  SECURITY
  APP
  DEVICE
  NETWORK

  @@map("policy_type")
}

enum PolicyStatus {
  PENDING
  APPLIED
  FAILED
  REMOVED

  @@map("policy_status")
}

enum InstallStatus {
  PENDING
  INSTALLED
  FAILED
  REMOVED

  @@map("install_status")
}

enum InstallType {
  USER
  REQUIRED
  BLOCKED

  @@map("install_type")
}

enum CommandType {
  WIPE
  LOCK
  UNLOCK
  REBOOT
  LOCATION
  INSTALL_APP
  UNINSTALL_APP
  APPLY_POLICY
  SYNC

  @@map("command_type")
}

enum CommandStatus {
  PENDING
  SENT
  ACKNOWLEDGED
  COMPLETED
  FAILED
  EXPIRED

  @@map("command_status")
}

enum EventType {
  DEVICE_ENROLLED
  DEVICE_UNENROLLED
  POLICY_APPLIED
  POLICY_VIOLATION
  APP_INSTALLED
  APP_REMOVED
  COMMAND_EXECUTED
  SECURITY_ALERT
  COMPLIANCE_CHECK

  @@map("event_type")
}

enum Severity {
  LOW
  INFO
  WARNING
  HIGH
  CRITICAL

  @@map("severity")
}
